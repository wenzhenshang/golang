go工作目录在环境变量GOPATH配置
bin
pkg
src----demo
       ----hello.go
go install

golang的环境配置
https://studygolang.com/articles/4454

golang在Windows下Sublime Text开发调试环境的配置
https://studygolang.com/articles/2731

go语言学习网站
https://books.studygolang.com/gopl-zh/ch1/ch1-01.html
 /-------------------------------------/
 https://github.com/astaxie/build-web-application-with-golang/blob/master/zh/preface.md
 /-------------------------------------/
1、指定变量类型，声明后若不赋值，使用默认值。

 var v_name v_type
 v_name = value
2、根据值自行判定变量类型。

 var v_name = value
3、省略var, 注意 :=左侧的变量不应该是已经声明过的，否则会导致编译错误。

 v_name := value
 
  //这种不带声明格式的只能在函数体中出现
  //g, h := 123, "hello"
  字符串要用双引号“xxx”,
  
unsafe.Sizeof(a)  Golang中的sring内部实现由两部分组成，
一部分是指向字符串起始地址的指针，另一部分是字符串的长度，两部分各是8字节，所以一共16字节

特殊常量iota

iota，特殊常量，可以认为是一个可以被编译器修改的常量。在每一个const关键字出现时，被重置为0，然后再下一个const出现之前，
每出现一次iota，其所代表的数字会自动增加1。iota 可以被用作枚举值。

if... else ...和C语言类似，Go 的 if 语句也不要求用 ( ) 将条件括起来，同时， { } 还是必须有的。
另外还需要特别注意else不能新起一行写，否则会报错：syntax error: unexpected semicolon or newline before else

type-switch用来判断某个 interface 变量中实际存储的变量类型。

   var x interface{} = "go"
 7      
 8    switch i := x.(type) {
 9       case nil:      
10          fmt.Printf(" x 的类型 :%T",i)                
11       case int:      
12          fmt.Printf("x 是 int 型")                       
13       case float64:
14          fmt.Printf("x 是 float64 型")           
15       case func(int) float64:
16          fmt.Printf("x 是 func(int) 型")                      
17       case bool, string:
18          fmt.Printf("x 是 bool 或 string 型" )       
19       default:
20          fmt.Printf("未知型")     
21    }  
nil是把一个对象设置为空
NULL是一个通用指针

defer 语句会延迟函数的执行直到上层函数返回。延迟调用的参数会立刻生成，但是在上层函数返回前函数都不会被调用。
延迟的函数调用被压入一个栈中。当函数返回时， 会按照后进先出的顺序调用被延迟的函数调用。

os.Args 表示接収输入值

golang的输入接収
//code
package main

import (
	"bufio"
	"fmt"
	"os"
)

func main() {

	input := bufio.NewScanner(os.Stdin) //初始化一个扫表对象
	for input.Scan() {                  //扫描输入内容
		line := input.Text() //把输入内容转换为字符串
		fmt.Println(line)    //输出到标准输出
	}

}
//
[ E:/go/workplace/src/hello/ ] # go build hello.go 
生成 hello.exe ,打开hello.exe 输入要输的值，

%d          十进制整数
%x, %o, %b  十六进制，八进制，二进制整数。
%f, %g, %e  浮点数： 3.141593 3.141592653589793 3.141593e+00
%t          布尔：true或false
%c          字符（rune） (Unicode码点)
%s          字符串
%q          带双引号的字符串"abc"或带单引号的字符'c'
%v          变量的自然形式（natural format）
%T          变量的类型
%%          字面上的百分号标志（无操作数）

package and import
多个源文件可同属于一个包，只要声明时package指定的包名一样；
一个包对应生成一个*.a文件，生成的文件名并不是包名+.a组成，应该是目录名+.a组成
go install ××× 这里对应的并不是包名，而是路径名！！
import ××× 这里使用的也不是包名，也是路径名
×××××.SayHello() 这里使用的才是包名！
指定×××路径名就代表了此目录下唯一的包，编译器连接器默认就会去生成或者使用它，而不需要我们手动指明！
一个目录下就只能有一个包存在
对于调用有源码的第三方包，连接器在连接时，其实使用的并不是我们工作目录下的.a文件，而是以该最新源码编译出的临时文件夹中的.a文件
对于调用没有源码的第三方包，上面的临时编译不可能成功，那么临时目录下就不可能有.a文件，所以最后链接时就只能链接到工作目录下的.a文件
对于标准库，即便是修改了源代码，只要不重新编译Go源码，那么链接时使用的就还是已经编译好的*.a文件
包导入有三种模式：正常模式、别名模式、简便模式

如果结构体成员名字是以大写字母开头的，那么该成员就是导出的

o install命令和go build命令很相似，但是它会保存每个包的编译成果，而不是将它们都丢弃。被编译的包会被保存到$GOPATH/pkg目录下，
目录路径和 src目录路径对应，可执行程序被保存到$GOPATH/bin目录。（很多用户会将$GOPATH/bin添加到可执行程序的搜索列表中。）还有，
go install命令和go build命令都不会重新编译没有发生变化的包，这可以使后续构建更快捷。为了方便编译依赖的包，go build -i命令将安
装每个目标所依赖的包


go语言的反射动态调用任意一个对象的方法，go的反射机制是要通过接口来进行的，
反射可以将“接口类型变量”转换为“反射类型对象”。
反射可以将“反射类型对象”转换为“接口类型变量”。
如果要修改“反射类型对象”，其值必须是“可写的”。

https://blog.csdn.net/liumiaocn/article/details/55253632 反射

判断传入的类型是否是我们想要的类型

package main

import (
    "fmt"
    "reflect"
)

type User struct {
    Id   int
    Name string
    Age  int
}

func (u User) Hello() {
    fmt.Println("Hello world!")
}
func Info(o interface{}) {
    t := reflect.TypeOf(o)                  //反射使用 TypeOf 和 ValueOf 函数从接口中获取目标对象信息
    fmt.Println("Type:", t.Name())          //调用t.Name方法来获取这个类型的名称
    if k := t.Kind(); k != reflect.Struct { //通过kind方法判断传入的类型是否是我们需要反射的类型
        fmt.Println("xx")
        return
    }
    v := reflect.ValueOf(o) //打印出所包含的字段
    fmt.Println("Fields:")
    for i := 0; i < t.NumField(); i++ { //通过索引来取得它的所有字段，这里通过t.NumField来获取它多拥有的字段数量，同时来决定循环的次数
        f := t.Field(i)               //通过这个i作为它的索引，从0开始来取得它的字段
        val := v.Field(i).Interface() //通过interface方法来取出这个字段所对应的值
        fmt.Printf("%6s:%v =%v\n", f.Name, f.Type, val)
    }
    for i := 0; i < t.NumMethod(); i++ { //这里同样通过t.NumMethod来获取它拥有的方法的数量，来决定循环的次数
        m := t.Method(i)
        fmt.Printf("%6s:%v\n", m.Name, m.Type)

    }
}
func main() {
    u := User{1, "Jack", 23}
    Info(u)
}
因为Golang中的sring内部实现由两部分组成，一部分是指向字符串起始地址的指针，另一部分是字符串的长度，两部分各是8字节，所以一共16字节
